# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    first_name = models.CharField(max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    action_flag = models.PositiveSmallIntegerField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class EspaciosAmaestramientos(models.Model):
    nombre = models.CharField(primary_key=True, max_length=30)
    codigo = models.CharField(max_length=30)

    class Meta:
        managed = False
        db_table = 'espacios_amaestramientos'


class EspaciosDepartamentos(models.Model):
    nombre = models.CharField(primary_key=True, max_length=30)

    class Meta:
        managed = False
        db_table = 'espacios_departamentos'


class EspaciosHabsCuartosSalas(models.Model):
    nombre = models.CharField(primary_key=True, max_length=30)

    class Meta:
        managed = False
        db_table = 'espacios_habs_cuartos_salas'


class EspaciosHabsCuartosSalasDepartamento(models.Model):
    habs_cuartos_salas = models.ForeignKey(EspaciosHabsCuartosSalas, models.DO_NOTHING)
    departamentos = models.ForeignKey(EspaciosDepartamentos, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'espacios_habs_cuartos_salas_departamento'
        unique_together = (('habs_cuartos_salas', 'departamentos'),)


class EspaciosHabsCuartosSalasPlantaOZona(models.Model):
    habs_cuartos_salas = models.ForeignKey(EspaciosHabsCuartosSalas, models.DO_NOTHING)
    planta_o_zonas = models.ForeignKey('EspaciosPlantaOZonas', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'espacios_habs_cuartos_salas_planta_o_zona'
        unique_together = (('habs_cuartos_salas', 'planta_o_zonas'),)


class EspaciosLlaves(models.Model):
    nombre = models.CharField(primary_key=True, max_length=30)
    codigo = models.CharField(max_length=30)
    posicion_de_llave_en_armario = models.CharField(max_length=30)
    usuario_llave = models.ForeignKey(AuthUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'espacios_llaves'


class EspaciosLlavesAmaestramiento(models.Model):
    llaves = models.ForeignKey(EspaciosLlaves, models.DO_NOTHING)
    amaestramientos = models.ForeignKey(EspaciosAmaestramientos, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'espacios_llaves_amaestramiento'
        unique_together = (('llaves', 'amaestramientos'),)


class EspaciosLlavesPlantaOZona(models.Model):
    llaves = models.ForeignKey(EspaciosLlaves, models.DO_NOTHING)
    planta_o_zonas = models.ForeignKey('EspaciosPlantaOZonas', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'espacios_llaves_planta_o_zona'
        unique_together = (('llaves', 'planta_o_zonas'),)


class EspaciosPlantaOZonas(models.Model):
    nombre = models.CharField(primary_key=True, max_length=30)

    class Meta:
        managed = False
        db_table = 'espacios_planta_o_zonas'


class EspaciosPlantaOZonasDepartamento(models.Model):
    planta_o_zonas = models.ForeignKey(EspaciosPlantaOZonas, models.DO_NOTHING)
    departamentos = models.ForeignKey(EspaciosDepartamentos, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'espacios_planta_o_zonas_departamento'
        unique_together = (('planta_o_zonas', 'departamentos'),)


class EspaciosPuertas(models.Model):
    nombre = models.CharField(primary_key=True, max_length=30)

    class Meta:
        managed = False
        db_table = 'espacios_puertas'


class EspaciosPuertasDepartamento(models.Model):
    puertas = models.ForeignKey(EspaciosPuertas, models.DO_NOTHING)
    departamentos = models.ForeignKey(EspaciosDepartamentos, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'espacios_puertas_departamento'
        unique_together = (('puertas', 'departamentos'),)


class EspaciosPuertasPlantaOZona(models.Model):
    puertas = models.ForeignKey(EspaciosPuertas, models.DO_NOTHING)
    planta_o_zonas = models.ForeignKey(EspaciosPlantaOZonas, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'espacios_puertas_planta_o_zona'
        unique_together = (('puertas', 'planta_o_zonas'),)


class PartesOtElementos(models.Model):
    elemento_el = models.CharField(primary_key=True, max_length=30)

    class Meta:
        managed = False
        db_table = 'partes_ot_elementos'


class PartesOtEtiquetas(models.Model):
    etiqueta_et = models.CharField(max_length=30)

    class Meta:
        managed = False
        db_table = 'partes_ot_etiquetas'


class PartesOtParte(models.Model):
    num_ot = models.AutoField(primary_key=True)
    descripcion_ot = models.CharField(max_length=300)
    fecha_ot = models.DateField()
    fecha_cambio_ot = models.DateField()
    prioridad_ot = models.CharField(max_length=30)
    estado_ot = models.CharField(max_length=30)
    recursos_ot = models.CharField(max_length=30)
    etiqueta_ot = models.CharField(max_length=30)
    notas_ot = models.CharField(max_length=30)
    tipo_aviso_ot = models.CharField(max_length=30)
    elemento_ot = models.ForeignKey(PartesOtElementos, models.DO_NOTHING, blank=True, null=True)
    ubicacion_ot = models.ForeignKey('PartesOtUbicaciones', models.DO_NOTHING, blank=True, null=True)
    fecha_hora_cambio_ot = models.DateTimeField()
    fecha_hora_terminado_ot = models.DateTimeField(blank=True, null=True)
    borrame_ot = models.CharField(max_length=30)
    tecnico_ot = models.ForeignKey(AuthUser, models.DO_NOTHING, db_column='Tecnico_ot_id', blank=True, null=True)  # Field name made lowercase.
    usuario_ot = models.ForeignKey(AuthUser, models.DO_NOTHING, db_column='Usuario_ot_id', blank=True, null=True)  # Field name made lowercase.
    tecnico_fin_parte_ot = models.ForeignKey(AuthUser, models.DO_NOTHING, db_column='Tecnico_fin_parte_ot_id', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'partes_ot_parte'


class PartesOtPedidos(models.Model):
    producto_pe = models.CharField(max_length=30)
    usuario_pe = models.ForeignKey(AuthUser, models.DO_NOTHING, db_column='Usuario_pe_id', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'partes_ot_pedidos'


class PartesOtTrabajos(models.Model):
    num_tra = models.AutoField(primary_key=True)
    descripcion_tra = models.CharField(max_length=300)
    fecha_tra = models.DateField()
    fecha_cambio_tra = models.DateField()
    num_ot_tra = models.ForeignKey(PartesOtParte, models.DO_NOTHING)
    fecha_hora_cambio_tra = models.DateTimeField()
    usuario_tra = models.ForeignKey(AuthUser, models.DO_NOTHING, db_column='Usuario_tra_id', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'partes_ot_trabajos'


class PartesOtUbicaciones(models.Model):
    ubicacion_ub = models.CharField(primary_key=True, max_length=30)

    class Meta:
        managed = False
        db_table = 'partes_ot_ubicaciones'


class PiscinasNombrePiscina(models.Model):
    nombre_piscina = models.CharField(max_length=300)

    class Meta:
        managed = False
        db_table = 'piscinas_nombre_piscina'


class PiscinasPiscgrmaana(models.Model):

    class Meta:
        managed = False
        db_table = 'piscinas_piscgrmañana'


class PiscinasValoresPiscina(models.Model):
    incidencias = models.CharField(db_column='Incidencias', max_length=300)  # Field name made lowercase.
    ph = models.DecimalField(db_column='Ph', max_digits=10, decimal_places=5)  # Field name made lowercase. max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    bromo = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    cloro_libre = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    cloro_total = models.DecimalField(max_digits=10, decimal_places=5, blank=True, null=True)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    correctos = models.BooleanField()
    fecha = models.DateField()
    fecha_hora = models.DateTimeField(db_column='fecha_Hora')  # Field name made lowercase.
    humedad_aire_spa = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    limpieza_bordes = models.BooleanField()
    nivel_bromo = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    nivel_cloro = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    nivel_ph = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    nombre_piscina = models.ForeignKey(PiscinasNombrePiscina, models.DO_NOTHING)
    presion_filtro = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    presion_filtro_limpiado = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    registrados = models.BooleanField()
    rellenado_ph = models.BooleanField(db_column='rellenado_Ph')  # Field name made lowercase.
    rellenado_bromo = models.BooleanField()
    rellenado_cloro = models.BooleanField()
    tecnico = models.CharField(max_length=300)
    temp_agua_spa = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    temp_aire_spa = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    transparencia = models.DecimalField(max_digits=10, decimal_places=5, blank=True, null=True)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    turbidez = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    intervencion_realizada = models.CharField(max_length=300)

    class Meta:
        managed = False
        db_table = 'piscinas_valores_piscina'


class RegistrosOtPedidoMaterial(models.Model):
    fecha_hora_cambio_ot = models.DateTimeField()
    material = models.CharField(db_column='Material', max_length=60)  # Field name made lowercase.
    notas_ot = models.CharField(max_length=300)
    num_pedido = models.AutoField(db_column='num_Pedido', primary_key=True)  # Field name made lowercase.
    estado_ot = models.CharField(max_length=30)

    class Meta:
        managed = False
        db_table = 'registros_ot_pedido_material'


class RegistrosOtTempClimaInterior(models.Model):
    num_temp_clima = models.AutoField(db_column='num_Temp_Clima', primary_key=True)  # Field name made lowercase.
    fecha_hora_cambio_ot = models.DateTimeField()
    temp_impulsion_aire = models.DecimalField(db_column='Temp_Impulsion_Aire', max_digits=10, decimal_places=5)  # Field name made lowercase. max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    temp_retorno_aire = models.DecimalField(db_column='Temp_Retorno_Aire', max_digits=10, decimal_places=5)  # Field name made lowercase. max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    temp_ambiente = models.DecimalField(db_column='Temp_Ambiente', max_digits=10, decimal_places=5)  # Field name made lowercase. max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    temp_impulsion_agua_caliente = models.DecimalField(db_column='Temp_Impulsion_Agua_Caliente', max_digits=10, decimal_places=5)  # Field name made lowercase. max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    temp_retorno_agua_caliente = models.DecimalField(db_column='Temp_Retorno_Agua_Caliente', max_digits=10, decimal_places=5)  # Field name made lowercase. max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    temp_impulsion_agua_fria = models.DecimalField(db_column='Temp_Impulsion_Agua_Fria', max_digits=10, decimal_places=5)  # Field name made lowercase. max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    notas_ot = models.CharField(max_length=30)
    field = models.ForeignKey(PartesOtUbicaciones, models.DO_NOTHING, blank=True, null=True)
    caudal_de_aire = models.DecimalField(db_column='Caudal_de_aire', max_digits=10, decimal_places=5)  # Field name made lowercase. max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    temp_retorno_agua_fria = models.DecimalField(db_column='Temp_Retorno_Agua_Fria', max_digits=10, decimal_places=5)  # Field name made lowercase. max_digits and decimal_places have been guessed, as this database handles decimal fields as float

    class Meta:
        managed = False
        db_table = 'registros_ot_temp_clima_interior'


class RegistrosOtTempMinibar(models.Model):
    fecha_hora_cambio_ot = models.DateTimeField()
    temp_interior = models.DecimalField(db_column='Temp_Interior', max_digits=10, decimal_places=5)  # Field name made lowercase. max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    field = models.ForeignKey(PartesOtUbicaciones, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'registros_ot_temp_minibar'


class ResumenAuthor(models.Model):
    name = models.CharField(max_length=200)
    email = models.CharField(max_length=254)

    class Meta:
        managed = False
        db_table = 'resumen_author'


class ResumenBlog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    class Meta:
        managed = False
        db_table = 'resumen_blog'


class ResumenEntry(models.Model):
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField()
    number_of_comments = models.IntegerField()
    number_of_pingbacks = models.IntegerField()
    rating = models.IntegerField()
    blog = models.ForeignKey(ResumenBlog, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'resumen_entry'


class ResumenEntryAuthors(models.Model):
    entry = models.ForeignKey(ResumenEntry, models.DO_NOTHING)
    author = models.ForeignKey(ResumenAuthor, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'resumen_entry_authors'
        unique_together = (('entry', 'author'),)


class RondasNombrePiscina(models.Model):
    nombre_piscina = models.CharField(max_length=300)

    class Meta:
        managed = False
        db_table = 'rondas_nombre_piscina'


class RondasPiscgrmaana(models.Model):

    class Meta:
        managed = False
        db_table = 'rondas_piscgrmañana'


class RondasValoresPiscina(models.Model):
    valores_fecha = models.DateField()
    valores_fecha_hora = models.DateTimeField(db_column='valores_fecha_Hora')  # Field name made lowercase.
    valores_tecnico = models.CharField(max_length=300)
    valores_ph = models.DecimalField(db_column='valores_Ph', max_digits=10, decimal_places=5)  # Field name made lowercase. max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_cloro_libre = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_cloro_total = models.DecimalField(max_digits=10, decimal_places=5, blank=True, null=True)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_transparencia = models.DecimalField(max_digits=10, decimal_places=5, blank=True, null=True)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_turbidez = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_bromo = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_temp_agua_spa = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_temp_aire_spa = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_humedad_aire_spa = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_presion_filtro = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_presion_filtro_limpiado = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_nivel_cloro = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_nivel_ph = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_nivel_bromo = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    valores_rellenado_cloro = models.BooleanField()
    valores_rellenado_ph = models.BooleanField(db_column='valores_rellenado_Ph')  # Field name made lowercase.
    valores_rellenado_bromo = models.BooleanField()
    valores_limpieza_bordes = models.BooleanField()
    valores_incidencias = models.CharField(db_column='valores_Incidencias', max_length=300)  # Field name made lowercase.
    valores_correctos = models.BooleanField()
    valores_intervencion_realizada = models.BooleanField()
    valores_realizado_el_registro = models.BooleanField()
    valores_nombre_piscina = models.ForeignKey(RondasNombrePiscina, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'rondas_valores_piscina'
